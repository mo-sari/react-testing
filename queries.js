[{"content":"import {screen, render} from '@testing-library/react';\r\n\r\nconst ColorList = ()=>{\r\n  return(\r\n    <div>\r\n      <ul>\r\n      <li>Red</li>\r\n      <li>Blue</li>\r\n      <li>Green</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\nrender(<ColorList/>);","type":"code","id":"7godt"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async ()=>{\r\n  render(<ColorList/>);\r\n  //getByRole\r\n  // every query started with getBy will throw an error\r\n  // if the element was on found, so the line below will throw an error:\r\n  // screen.getByRole('textbox');\r\n  // so we would use it this way:\r\n  expect(()=> screen.getByRole('textbox')).toThrow();\r\n\r\n  //queryByRole\r\n  // queryies started with queryBy with give back null\r\n  // if the element was not found\r\n  expect(screen.queryByRole('textbox')).toEqual(null);\r\n\r\n  //findByRole\r\n  // every query started with findBy will look for the element\r\n  // asynchronously for 1 second, and then throw an error if was not found\r\n  // we'll have to make all the test async\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('textbox');\r\n  } catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n})","type":"code","id":"yx6f1"},{"content":"test('getBy, queryBy, findBy finding 1 elements', async ()=>{\r\n  render(<ColorList/>);\r\n  //getByRole\r\n  expect(screen.getByRole('list')).toBeInTheDocument();\r\n\r\n  //queryByRole\r\n  expect(screen.queryByRole('list')).toBeInTheDocument();\r\n\r\n  //findByRole\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('list');\r\n  } catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(false);\r\n  // for the findByRole we can also do this:\r\n  expect(await screen.findByRole('list')).toBeInTheDocument();\r\n})","type":"code","id":"ksfh2"},{"content":"test('getBy, queryBy, findBy finding > 1 elements', async ()=>{\r\n  render(<ColorList/>);\r\n  // all the query types will throw an error when\r\n  // we look for a single item and get more than one\r\n  //getByRole\r\n  expect(()=> screen.getByRole('listitem')).toThrow();\r\n\r\n  //queryByRole\r\n  expect(()=> screen.queryByRole('listitem')).toThrow();\r\n\r\n  //findByRole\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('textbox');\r\n  } catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n})","type":"code","id":"l6rhc"},{"content":"test('findAllBy, queryAllBy, getAllBy', async()=>{\r\n  // when you're looking for a list of items if you find one or more\r\n  // all the three query types will give you a list of items,\r\n  // just in case you don't find any, getAll and findAll with throw an\r\n  // error but queryAll with give you an empty list.\r\n  render(<ColorList/>);\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\r\n\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\r\n\r\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\r\n})","type":"code","id":"7193t"}]