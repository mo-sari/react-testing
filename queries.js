[{"content":"# Query  Functions\n\nAll query functions are accessed through the `screen` object in a test.  These query functions *always* begin with one of the following names: `getBy`, `getAllBy`, `queryBy`, `queryAllBy`, `findBy`, `findAllBy`. \n\n| Start of Function Name | Examples                             |\n|------------------------|--------------------------------------|\n| getBy                  | getByRole, getByText                 |\n| getAllBy               | getAllByText, getByDisplayValue      |\n| queryBy                | queryByDisplayValue, queryByTitle    |\n| queryAllBy             | queryAllByTitle, queryAllByText      |\n| findBy                 | findByRole, findBytext               |\n| findAllBy              | findAllByText, findAllByDisplayValue |\n\nThese names indicate the following:\n\n1. Whether the function will return an element or an array of elements\n2. What happens if the function finds 0, 1, or > 1 of the targeted element\n3. Whether the function runs instantly (synchronously) or looks for an element over a span of time (asynchronously)\n\n\n### Looking for a Single Element?\n\n| Name    | 0 matches | 1 match | > 1 match | Notes                                          |\n|---------|-----------|---------|-----------|------------------------------------------------|\n| getBy   | Throw     | Element | Throw     |                                                |\n| queryBy | null      | Element | Throw     |                                                |\n| findBy  | Throw     | Element | Throw     | Looks for an element over the span of 1 second |\n\n\n### Looking for Multiple Elements?\n\n| Name       | 0 matches | 1 match   | > 1 match | Notes                                        |\n|------------|-----------|-----------|-----------|----------------------------------------------|\n| getAllBy   | Throw     | []Element | []Element |                                              |\n| queryAllBy | [ ]       | []Element | []Element |                                              |\n| findAllBy  | Throw     | []Element | []Element | Looks for elements over the span of 1 second |\n\n\n### When to use each\n\n| Goal of test                           | Use                 |\n|----------------------------------------|---------------------|\n| Prove an element exists                | getBy, getAllBy     |\n| Prove an element does **not** exist        | queryBy, queryAllBy |\n| Make sure an element eventually exists | findBy, findAllBy   |","type":"text","id":"x1amz"},{"content":"import {screen, render} from '@testing-library/react';\r\n\r\nconst ColorList = ()=>{\r\n  return(\r\n    <div>\r\n      <ul>\r\n      <li>Red</li>\r\n      <li>Blue</li>\r\n      <li>Green</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\nrender(<ColorList/>);","type":"code","id":"7godt"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async ()=>{\r\n  render(<ColorList/>);\r\n  //getByRole\r\n  // every query started with getBy will throw an error\r\n  // if the element was on found, so the line below will throw an error:\r\n  // screen.getByRole('textbox');\r\n  // so we would use it this way:\r\n  expect(()=> screen.getByRole('textbox')).toThrow();\r\n\r\n  //queryByRole\r\n  // queryies started with queryBy with give back null\r\n  // if the element was not found\r\n  expect(screen.queryByRole('textbox')).toEqual(null);\r\n\r\n  //findByRole\r\n  // every query started with findBy will look for the element\r\n  // asynchronously for 1 second, and then throw an error if was not found\r\n  // we'll have to make all the test async\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('textbox');\r\n  } catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n})","type":"code","id":"yx6f1"},{"content":"test('getBy, queryBy, findBy finding 1 elements', async ()=>{\r\n  render(<ColorList/>);\r\n  //getByRole\r\n  expect(screen.getByRole('list')).toBeInTheDocument();\r\n\r\n  //queryByRole\r\n  expect(screen.queryByRole('list')).toBeInTheDocument();\r\n\r\n  //findByRole\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('list');\r\n  } catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(false);\r\n  // for the findByRole we can also do this:\r\n  expect(await screen.findByRole('list')).toBeInTheDocument();\r\n})","type":"code","id":"ksfh2"},{"content":"test('getBy, queryBy, findBy finding > 1 elements', async ()=>{\r\n  render(<ColorList/>);\r\n  // all the query types will throw an error when\r\n  // we look for a single item and get more than one\r\n  //getByRole\r\n  expect(()=> screen.getByRole('listitem')).toThrow();\r\n\r\n  //queryByRole\r\n  expect(()=> screen.queryByRole('listitem')).toThrow();\r\n\r\n  //findByRole\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('textbox');\r\n  } catch(err){\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n})","type":"code","id":"l6rhc"},{"content":"test('findAllBy, queryAllBy, getAllBy', async()=>{\r\n  // when you're looking for a list of items if you find one or more\r\n  // all the three query types will give you a list of items,\r\n  // just in case you don't find any, getAll and findAll with throw an\r\n  // error but queryAll with give you an empty list.\r\n  render(<ColorList/>);\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\r\n\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\r\n\r\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\r\n})","type":"code","id":"7193t"},{"content":"test('favor getBy and getAllBy when proving an element does exist', ()=>{\r\n  render(<ColorList/>);\r\n  const ul = screen.getByRole('list');\r\n  expect(ul).toBeInTheDocument();\r\n})","type":"code","id":"hrjj7"},{"content":"test('favor queryBy and queryAllBy when proving an element does not exist', ()=>{\r\n  render(<ColorList/>);\r\n  const ul = screen.queryByRole('textbox');\r\n  expect(ul).not.toBeInTheDocument();\r\n})","type":"code","id":"uch50"},{"content":"import {useState, useEffect} from 'react';\r\n\r\nconst fakeFetchColors = ()=>{\r\n  return Promise.resolve(\r\n    ['red', 'blue', 'green']);\r\n}\r\n\r\nconst LoadableColorList = ()=>{\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    fakeFetchColors().then(c => setColors(c));\r\n  },[])\r\n  \r\n  return (\r\n    <>\r\n      <ul>\r\n        {colors.map(c=>{\r\n          return <li>{c}</li>\r\n        })}\r\n      </ul>\r\n    </>\r\n  )\r\n};\r\nrender(<LoadableColorList/>);","type":"code","id":"7aj09"},{"content":"test('favor findBy and findAllBy when data fetching',async ()=>{\r\n  render(<ColorList/>);\r\n  const ul = await screen.findAllByRole('listitem');\r\n  expect(ul).toHaveLength(3);\r\n})","type":"code","id":"e908z"}]