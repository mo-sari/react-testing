[{"content":"import {render, screen, within} from '@testing-library/react';\r\n\r\nconst FormData = ()=>{\r\n  return(\r\n    <div>\r\n      <button>Go Back</button>\r\n      <form aria-label='form'>\r\n        <button>Save</button>\r\n        <button>Cancel</button>\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\nrender(<FormData/>);","type":"code","id":"es1us"},{"content":"test('finding the two buttons inside the form', ()=>{\r\n  render(<FormData/>);\r\n\r\n  const btns = within(screen.getByRole('form')).getAllByRole('button');\r\n\r\n  expect(btns).toHaveLength(2);\r\n  // if this is something that we do repeatedly\r\n  // it is probably better to write a custom \r\n  // matcher for it, like below code sections\r\n})","type":"code","id":"yykt0"},{"content":"const toContainRole = (container, role, count = 1) => {\n  // you check for whatever you're looking for and then\n  // would return an object with a pass key which is either\n  // true or false indicating the test passed or failed\n\n  const elements = within(container).getAllByRole(role);\n\n  if (elements.length === count) {\n    return {\n      pass: true,\n    };\n  }\n  return {\n    pass: false,\n    message: () =>\n      `were looking for ${count} ${role}s, but found ${elements.length}`,\n  };\n};\n\nexpect.extend({ toContainRole });","type":"code","id":"w6imj"},{"content":"test('finding the two buttons inside the form', ()=>{\r\n  render(<FormData/>);\r\n\r\n  const form = screen.getByRole('form');\r\n\r\n  expect(form).toContainRole('button', 2);\r\n})","type":"code","id":"2cic5"}]