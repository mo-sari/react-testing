[{"content":"import {render} from '@testing-library/react';\r\n\r\nconst RoleExample = ()=>{\r\n  return(\r\n    <div>\r\n      <a href='/'>Link</a>\r\n      <button>Button</button>\r\n      <footer>Contentinfo</footer>\r\n      <h1>Heading</h1>\r\n      <header>Banner</header>\r\n      <img alt='descriptoin'/>Img\r\n      <input type=\"checkbox\" /> Checkbox\r\n      <input type=\"number\" /> Spinbutton\r\n      <input type=\"radio\" /> Radio\r\n      <input type=\"text\" /> Textbox\r\n      <li>Listitem</li>\r\n      <ul>List</ul>\r\n    </div>\r\n  )\r\n}\r\nrender(<RoleExample/>);","type":"code","id":"6pyuk"},{"content":"test('can find the elements by role', ()=>{\r\n  render(<RoleExample/>);\r\n  const roles = [\r\n    'link',\r\n    'button',\r\n    'contentinfo',\r\n    'heading',\r\n    'banner',\r\n    'img',\r\n    'checkbox',\r\n    'spinbutton',\r\n    'radio',\r\n    'textbox',\r\n    'listitem',\r\n    'list',\r\n  ];\r\n  for(let role of roles){\r\n    const el = screen.getByRole(role);\r\n    expect(el).toBeInTheDocument();\r\n  }\r\n})","type":"code","id":"l09as"},{"content":"const AccessibleName = ()=>{\r\n  return(\r\n    <div>\r\n      <button>submit</button>\r\n      <button>cancel</button>\r\n    </div>\r\n  )\r\n}\r\nrender(<AccessibleName/>);","type":"code","id":"u8zow"},{"content":"test('find one of the similar elements',()=>{\r\n  render(<AccessibleName/>);\r\n\r\n  button1 = screen.getByRole('button', {name: /submit/i});\r\n  button2 = screen.getByRole('button', {name: /cancel/i});\r\n\r\n  expect(button1).toBeInTheDocument();\r\n  expect(button2).toBeInTheDocument();\r\n})","type":"code","id":"g66zg"},{"content":"const MoreAccessibleNames = ()=>{\r\n  return(\r\n    <div>\r\n      <label htmlFor='email'>Email</label>\r\n      <input id='email' type='text' />\r\n      <label htmlFor='password'>Password</label>\r\n      <input id='password' type='text' />\r\n      \r\n    </div>\r\n  )\r\n};\r\nrender(<MoreAccessibleNames/>);","type":"code","id":"mvt66"},{"content":"test('trying to find email and password inputs', ()=>{\r\n  render(<MoreAccessibleNames/>);\r\n\r\n  const emailInput = screen.getByRole('textbox', {\r\n    name: /email/i\r\n  });\r\n  const passwordInput = screen.getByRole('textbox', {\r\n    name: /password/i\r\n  })\r\n\r\n  expect(emailInput).toBeInTheDocument();\r\n  expect(passwordInput).toBeInTheDocument();\r\n})","type":"code","id":"6e4kd"},{"content":"below is the example for times we do not specify a name or text for the element,\nlike a button that only has an icon inside it, we can manualy pass an accessible name\nto the element ourselves","type":"text","id":"oj00s"},{"content":"const IconButtons = ()=>{\r\n  return(\r\n    <div>\r\n      <button aria-label='sign in'>\r\n        <svg />\r\n      </button>\r\n      <button aria-label='sign out'>\r\n        <svg />\r\n      </button>\r\n    </div>\r\n  )\r\n};\r\nrender(<IconButtons/>);","type":"code","id":"c1v2c"},{"content":"test('find elements based on label', ()=>{\r\n  render(<IconButtons/>);\r\n\r\n  const buttonOne = screen.getByRole('button',{name: /sign in/i});\r\n  const buttonTwo = screen.getByRole('button', {name: /sign out/i});\r\n\r\n  expect(buttonOne).toBeInTheDocument();\r\n  expect(buttonTwo).toBeInTheDocument();\r\n})","type":"code","id":"n7j2y"}]